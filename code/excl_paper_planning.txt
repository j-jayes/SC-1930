

### Clustering together occupations

Steps for making the occupational strings shorter.

First, flagging f.d.

Next, place of work.

Next, fn.

f. could mean före detta or född - this is a problem - we need to come back to it.

Final column - that keeps everything we want to remove, e.g. s. e. or n:r 17 etc.

If the occupation ends in f. or f.d. or any of the other combinations - take the previous word for former occupations and put that in an additional column. - if there are two words before. Otherwise, just remove f.d.


Next - änka and such.c And the 45 instances of "i". "hyr", "har", "förste", "med"

replace abbreviations with the full word, e.g. Med. as Medicine.

Filisophie - Fil. - and that filosophie on it's own should not be done.

## Widows:

Änka efter etc

Understödstagare FLAG FOR THIS

hustru - flag for this


## Assistant

biträde - flag for this to distinguish between.

## managing director

Verkställande direktör or v.d. - what is V.D.M.

Verkställande on its own might be enough to identify it.

```{r}
common_occs %>%
  filter(str_detect(yrke, "fd"))

# example for counting words
# we want to count the number of occupations: must be word, not f.d.


common_occs %>%
  mutate(
    yrke_copy = yrke
    )

```


```{r}
common_occs_trimmed <- common_occs %>%
  mutate(
    # this makes a copy of the original column, that we then modify
    yrke_copy = yrke,
    # We create a column for former, indicated by fd. We remove this from the original column.

    flag_fd = ifelse(str_detect(yrke, "f\\.d\\.|f\\.d|^fd| fd|f d\\.| f\\. d\\.|f\\. d$"),
      TRUE, FALSE
    ),
    yrke = str_remove_all(yrke, "f\\.d\\.|f\\.d|^fd| fd|f d\\.| f\\. d\\.|f\\. d$"),
    # fn
    flag_fn = ifelse(str_detect(yrke, "f\\.n\\.|f\\. n\\.|f\\. n"),
      TRUE, FALSE
    ),
    yrke = str_remove_all(yrke, "f\\.n\\.|f\\. n\\.|f\\. n"),


    # create a column for place of work
    yrke_pow = str_extract(yrke, " hos .*| vid .*| i .*| på.*| å .*| h\\. "),
    # remove this from yrke
    yrke = str_remove_all(yrke, " hos .*| vid .*| i .*| på.*| å .*| h\\. "),

    # f.
    yrke_f_occ = str_extract(yrke, " f\\..*"),
    yrke = str_remove_all(yrke, " f\\..*")
  ) %>%
  mutate(
    flag_for_multi_occs = ifelse(
      str_detect(
        yrke_copy,
        "f\\.d\\.$|f\\.d$|^fd$| fd$|f d\\.$| f\\. d\\.$|f\\. d$| f\\.$"
      ) &
        str_detect(yrke_copy, " [A-Z].*"), yes = TRUE, no = FALSE
    )
  ) %>%
  mutate(
    yrke_clean = str_squish(str_remove(yrke, "f\\.d\\.$|f\\.d$|^fd$| fd$|f d\\.$| f\\. d\\.$|f\\. d$| f\\.$")),
    yrke_f_occ = case_when(
      flag_for_multi_occs == TRUE ~ word(yrke_clean, -1),
      TRUE ~ NA_character_
    ),
    yrke = case_when(
      flag_for_multi_occs == TRUE ~ str_remove(yrke, " .*"),
      TRUE ~ yrke
    )
  ) %>%
  select(-yrke_clean) %>%
  mutate(
    yrke = str_remove_all(yrke, "[:punct:]"),
    yrke = str_to_lower(yrke),
    yrke = str_squish(yrke)
  ) %>%
  mutate(yrke_1 = word(yrke, 1))

common_occs_trimmed %>%
  count(yrke_1, sort = T) %>% view()

common_occs_trimmed %>%
  filter(str_detect(yrke_1, "^med$")) %>% view()
```

### Those withot work

Utan fast anställning


```{r}
df %>% filter(str_detect(yrke, "f\\.d\\.$")) %>% select(yrke) %>% view()

df %>%
  filter(
    kon == "K",
         # civ == "G",
         str_detect(yrke, "f\\. [A-Z]")) %>% view()

df %>% filter(str_detect(yrke, ",")) %>% view()

df %>%
  filter(str_detect(yrke, " å ")) %>% select(yrke) %>% head(500) %>% view()

df %>%
  filter(str_detect(yrke, "Hemmansägare f.")) %>% select(yrke) %>% head(200) %>% view()

common_occs %>% head(100) %>% view()
```



## Way to distinguish between Female title and holdover from man

```{r}
common_occs_trimmed %>% view()

df_classification <- df %>%
  filter(yrke != "") %>%
  select(kon, yrke, age)

df_classification <- df_classification %>%
  left_join(common_occs_trimmed %>%
              rename(yrke_clean = yrke), by = c("yrke" = "yrke_copy"))


df_classification %>%
  filter(flag_for_multi_occs  == T) %>% view()
```

### How many there are of each one

```{r}
common_occs_trimmed_grouped <- common_occs_trimmed %>%
  group_by(yrke_1) %>%
  mutate(total_observations = sum(n)) %>%
  ungroup()

common_occs_trimmed_grouped %>%
  arrange(desc(total_observations)) %>%
  distinct(yrke_1, total_observations, .keep_all = T) %>%
  select(yrke, total_observations, yrke_1) %>% view

common_occs_trimmed_grouped %>%
  filter(between(total_observations, 1, 5)) %>%
  summarise(sum(n))

```

### Most common places of work

```{r}
common_occs_trimmed %>%
  filter(!is.na(yrke_pow)) %>%
  count(yrke_pow, sort = T) %>% head(200) %>% view()
```




## New approach -

Just keep one wod in the first column for those that have only one word


```{r}
df_counts_of_occs <- df %>%
  select(yrke) %>%
  filter(yrke != "") %>%
  mutate(yrke_one = word(yrke, 1),
         yrke_count_spaces = str_count(yrke, " "))

df_counts_of_occs %>%
  count(yrke_count_spaces)

df_counts_of_occs %>%
  filter(yrke_count_spaces == 5) %>% view()
```




### A new approach.

Instead of classifying down to socio-economic group - rather group by leading codes.

First look at the 1910 census, apply the same rules as above,

```{r}

occstrings_1910 <- read_rds("data/OCCSTRING_lookup.rds") %>%
  rename(hisco = OCCHISCO,
         yrke = OCCSTRNG)

occstrings_1910 <- occstrings_1910 %>%
  mutate(
    # this makes a copy of the original column, that we then modify
    yrke_copy = yrke,
    yrke = str_to_lower(yrke),
    # We create a column for former, indicated by fd. We remove this from the original column.

    flag_fd = ifelse(str_detect(yrke, "f\\.d\\.|f\\.d|^fd| fd|f d\\.| f\\. d\\.|f\\. d$"),
      TRUE, FALSE
    ),
    yrke = str_remove_all(yrke, "f\\.d\\.|f\\.d|^fd| fd|f d\\.| f\\. d\\.|f\\. d$"),
    # fn
    flag_fn = ifelse(str_detect(yrke, "f\\.n\\.|f\\. n\\.|f\\. n"),
      TRUE, FALSE
    ),
    yrke = str_remove_all(yrke, "f\\.n\\.|f\\. n\\.|f\\. n"),


    # create a column for place of work
    yrke_pow = str_extract(yrke, " hos .*| vid .*| i .*| på.*| å .*| h\\. "),
    # remove this from yrke
    yrke = str_remove_all(yrke, " hos .*| vid .*| i .*| på.*| å .*| h\\. "),

    # f.
    yrke_f_occ = str_extract(yrke, " f\\..*"),
    yrke = str_remove_all(yrke, " f\\..*"),
    yrke = str_remove_all(yrke, " fa da"),
    yrke = str_remove_all(yrke, "^fa | fa$| fa "),
    yrke = str_remove_all(yrke, "^fada | fada$| fada "),
    yrke = str_remove_all(yrke, "^da | da$| da ")
  ) %>%
  mutate(
    flag_for_multi_occs = ifelse(
      str_detect(
        yrke_copy,
        "f\\.d\\.$|f\\.d$|^fd$| fd$|f d\\.$| f\\. d\\.$|f\\. d$| f\\.$"
      ) &
        str_detect(yrke_copy, " [A-Z].*"), yes = TRUE, no = FALSE
    )
  ) %>%
  mutate(
    yrke_clean = str_squish(str_remove(yrke, "f\\.d\\.$|f\\.d$|^fd$| fd$|f d\\.$| f\\. d\\.$|f\\. d$| f\\.$")),
    yrke_f_occ = case_when(
      flag_for_multi_occs == TRUE ~ word(yrke_clean, -1),
      TRUE ~ NA_character_
    ),
    yrke = case_when(
      flag_for_multi_occs == TRUE ~ str_remove(yrke, " .*"),
      TRUE ~ yrke
    )
  ) %>%
  select(-yrke_clean) %>%
  mutate(
    yrke = str_remove_all(yrke, "[:punct:]"),
    yrke = str_to_lower(yrke),
    yrke = str_squish(yrke)
  ) %>%
  mutate(yrke_1 = word(yrke, 1))
```

How many disagreements do we have?

```{r}


occstrings_1910 %>%
  count(yrke_1, sort = T) %>% head(500) %>% view()
```

Need to describe how this has worked.

```{r}
occstrings_1910 %>%
  filter(yrke_1 =="arbetare") %>%
  select(hisco, yrke,  yrke_1) %>%
  count(hisco, sort = T)

occstrings_1910 %>%
  filter(yrke_1 =="snickare") %>%
  select(hisco, yrke,  yrke_1) %>%
  count(hisco, sort = T)

occstrings_1910 %>%
  filter(yrke_1 == "ingenjör") %>%
  count(hisco, sort = T)
```

How to deal with this.


Okay so first pass is obviously a straight match.

Then a SVM

Then a neaural net.

### Straight match

```{r}
df <- read_rds("data/augmented/df_1930_augmented.rds")

df_titles <- df %>%
  select(id, yrke) %>%
  filter(yrke != "")


df_titles <- df_titles %>%
  mutate(
    # this makes a copy of the original column, that we then modify
    yrke_copy = yrke,
    # We create a column for former, indicated by fd. We remove this from the original column.

    flag_fd = ifelse(str_detect(yrke, "f\\.d\\.|f\\.d|^fd| fd|f d\\.| f\\. d\\.|f\\. d$"),
      TRUE, FALSE
    ),
    yrke = str_remove_all(yrke, "f\\.d\\.|f\\.d|^fd| fd|f d\\.| f\\. d\\.|f\\. d$"),
    # fn
    flag_fn = ifelse(str_detect(yrke, "f\\.n\\.|f\\. n\\.|f\\. n"),
      TRUE, FALSE
    ),
    yrke = str_remove_all(yrke, "f\\.n\\.|f\\. n\\.|f\\. n"),


    # create a column for place of work
    yrke_pow = str_extract(yrke, " hos .*| vid .*| i .*| på.*| å .*| h\\. "),
    # remove this from yrke
    yrke = str_remove_all(yrke, " hos .*| vid .*| i .*| på.*| å .*| h\\. "),

    # f.
    yrke_f_occ = str_extract(yrke, " f\\..*"),
    yrke = str_remove_all(yrke, " f\\..*")
  ) %>%
  mutate(
    flag_for_multi_occs = ifelse(
      str_detect(
        yrke_copy,
        "f\\.d\\.$|f\\.d$|^fd$| fd$|f d\\.$| f\\. d\\.$|f\\. d$| f\\.$"
      ) &
        str_detect(yrke_copy, " [A-Z].*"), yes = TRUE, no = FALSE
    )
  ) %>%
  mutate(
    yrke_clean = str_squish(str_remove(yrke, "f\\.d\\.$|f\\.d$|^fd$| fd$|f d\\.$| f\\. d\\.$|f\\. d$| f\\.$")),
    yrke_f_occ = case_when(
      flag_for_multi_occs == TRUE ~ word(yrke_clean, -1),
      TRUE ~ NA_character_
    ),
    yrke = case_when(
      flag_for_multi_occs == TRUE ~ str_remove(yrke, " .*"),
      TRUE ~ yrke
    )
  ) %>%
  select(-yrke_clean) %>%
  mutate(
    yrke = str_remove_all(yrke, "[:punct:]"),
    yrke = str_to_lower(yrke),
    yrke = str_squish(yrke)
  ) %>%
  mutate(yrke_1 = word(yrke, 1))


```




```{r}
df_titles

occstrings_1910
```

