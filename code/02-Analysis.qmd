---
title: "02-analysis"
format: html
---

We want to do a basic cross tab map - Compare population change by parish to access to electricity. 

Need 1910 census ad 1930 census.

```{r}
library(tidyverse)

df_census <- read_rds("data/population_by_parish_1880_1930")

parish_sample <- df_census %>%
  distinct(ref_code_char) %>%
  slice_sample(n = 30) %>% 
  pull()

df_census %>% 
  pivot_longer(-ref_code_char) %>% 
  mutate(name = parse_number(name)) %>% 
  filter(ref_code_char %in% parish_sample) %>% 
  ggplot(aes(name, value, colour = ref_code_char)) +
  geom_line() +
  scale_y_log10()
```

lan codes

```{r}
lan_codes <- read_rds("data/lan_codes.rds")
```


Map:

```{r}
# library(histmaps)
# data("geom_meta")
# library(sf)
# p_map <- get_boundaries("1910", "parish")
# st_map <- p_map %>% left_join(geom_meta, by = c("geom_id"))
# st_map <- st_map %>% 
#   mutate(ref_code_char = str_remove(ref_code.x, "SE/"),
#          ref_code_char = str_sub(ref_code_char, end = -4))

# st_map %>% 
#   write_rds("data/st_map.rds")

st_map <- read_rds("data/st_map.rds")

st_map %>% 
  select(ref_code_char, name, county)
```

Census changes:

```{r}
df_census_changes <- df_census %>%
  mutate(
    mon_inc_1880_1910 = case_when(
      x1880 < x1890 & x1890 < x1900 & x1900 < x1910 ~ 1,
      x1910 < x1900 & x1900 < x1890 & x1890 < x1880 ~ -1,
      TRUE ~ 0
    ),
    mon_inc_1880_1930 = case_when(
      x1880 < x1890 & x1890 < x1900 & x1900 < x1910 & x1910 < x1930 ~ 1,
      x1930 < x1910 & x1910 < x1900 & x1900 < x1890 & x1890 < x1880 ~ -1,
      TRUE ~ 0
    ),
    pct_change_1880_1910 = 100 * (x1910 - x1880) / x1880,
    pct_change_1880_1930 = 100 * (x1930 - x1880) / x1880,
  )

# df_census_changes %>% write_rds("df_census_changes.rds")

df_census_changes_map <- df_census_changes %>% 
  # select(ref_code_char, mon_inc_1880_1910, mon_inc_1880_1930, pct_change_1880_1910, pct_change_1880_1930) %>% 
  inner_join(st_map)
```

What do we find first?

```{r}
df_census_changes_map %>% 
  # filter(county == 15) %>%
  ggplot(aes(fill = mon_inc_1880_1910, geometry = geometry)) +
  geom_sf(colour = "black") +
  scale_fill_gradient2() +
  labs(title = "Increasing population and decreasing population",
       subtitle = "In Sweden from 1880 to 1910")


get_gg_map <- function(parish) {
  # this function
  county_highlight <- st_map %>% 
    filter(ref_code_char == parish) %>% 
    pull(county)

  tbl <- st_map %>%
    filter(county == county_highlight) %>% 
    st_as_sf() %>%
    st_transform(., crs = 4326)

  bbcoords <- tbl %>%
    st_bbox() %>%
    as.numeric()

  get_zoom <- function(bbox) {
    lonlength <- bbcoords[3] - bbcoords[1]
    latlength <- bbcoords[4] - bbcoords[2]
    zoomlon <- ceiling(log2(360 * 2 / lonlength))
    zoomlat <- ceiling(log2(180 * 2 / latlength))
    zoom <- max(zoomlon, zoomlat)
    zoom
  }

  zm <- get_zoom(bbcoords)

  ggmap_obj <- get_map(bbcoords, zoom = zm)
  
  return(ggmap_obj)

} 



plot_pop_change_county <- function(parish, end_year) {
  county_highlight <- df_census_changes_map %>%
    filter(ref_code_char == parish) %>%
    pull(county)

  var <- ifelse(end_year == 1930, "pct_change_1880_1930", "pct_change_1880_1910")

  ggmap_obj <- get_gg_map(parish)

  ggmap(ggmap_obj) +
    geom_sf(
      data = df_census_changes_map %>%
        filter(county == county_highlight),
      aes(fill = pct_change_1880_1930, geometry = geometry),
      colour = "black",
      inherit.aes = FALSE,
      alpha = .5
    ) +
    scale_fill_gradient2(
      low = "#2c7fb8",
      high = "#f03b20",
      midpoint = 0,
      mid = "#ffffff",
      na.value = "#FFFF00"
    ) +
    labs(title = "Title")
}

plot_pop_change_county(parish, 1930)



df_census_changes_map %>% 
  filter(county == 5) %>%
  ggplot(aes(fill = pct_change_1880_1930, geometry = geometry)) +
  geom_sf(colour = "black") +
  scale_fill_gradient2(labels = scales::percent_format(scale = 1))

```


Need to work out how to do the intersection thing between the grid and then highlight the counties that do have the intersection at a particular time to track changes. 


just show change in population by county in the two groups over the different time periods:1910 to 1930. 

We need the knowledge of the assignment mechanism: does being on the central line increase available power and when? 

obviously we need to have the invention of three phase AC to transmit over long distances. 

If the power generated is DC - it is to be used locally. If AC - then far transmission. Is there a correlation between the areas with lot's of DC power and the areas with a lot of grid cables??

## Plot map function

This has three things we need to do.

First we need to get the coordinates of the bounding box of the objects in the county using st_bbox.

Then we need to get the map and save it as a ggmap object. 

Then we need to plot the map on top of the ggmap object.

Let's do this all in a single function I think.

How to improve? Change zoom based on bounding box - need to think clearly about this

```{r}
library(sf)
library(ggmap)

# var can be one of pct_change_1880_1910 or mon_inc_1880_1910

plot_gg_map <- function(tbl, ct, var) {
  # this function
  tbl_trans <- tbl %>%
    st_as_sf() %>%
    st_transform(., crs = 4326) %>%
    filter(county %in% ct)

  ct_lab <- lan_codes %>%
    filter(lan_code %in% ct) %>%
    pull(lan) %>%
    paste(collapse = ", ") %>%
    str_remove_all(., " lan")

  bbcoords <- tbl_trans %>%
    st_bbox() %>%
    as.numeric()

  get_zoom <- function(bbox) {
    lonlength <- bbcoords[3] - bbcoords[1]
    latlength <- bbcoords[4] - bbcoords[2]
    zoomlon <- ceiling(log2(360 * 2 / lonlength))
    zoomlat <- ceiling(log2(180 * 2 / latlength))
    zoom <- max(zoomlon, zoomlat)
    zoom
  }

  zm <- get_zoom(bbcoords)

  message("Zoom is: ", zm, "\nGetting map of ", ct_lab, " län")

  ggmap_obj <- get_map(bbcoords, zoom = zm)

  ggmap_obj %>% write_rds(glue::glue("data/ggmap_objs/county_", ct %>% paste(collapse = "_")))

  ggplot_obj <- tbl_trans

  message("Drawing map of ", ct_lab, " län")

  ggmap(ggmap_obj) +
    geom_sf(
      data = ggplot_obj,
      aes(fill = {{ var }}, geometry = geometry),
      colour = "black",
      inherit.aes = FALSE,
      alpha = .5
    ) +
    scale_fill_gradient2(
      low = "#2c7fb8",
      high = "#f03b20",
      midpoint = 0,
      mid = "#ffffff",
      na.value = "#FFFF00"
    ) +
    # scale_fill_gradientn(colours = colorspace::diverge_hcl(7),
    # na.value = "#ffffff") +
    labs(
      title = "Percentage change in population: 1880-1910",
      subtitle = glue::glue("In ", ct_lab, " län"),
      fill = "% pop change",
      caption = "Yellow areas have missing data",
      x = NULL,
      y = NULL
    )
}


plot_gg_map(df_census_changes_map, 5, pct_change_1880_1930)
```


Three fold map with names of counties that were the highest and then column plot and then a line plot.

```{r}
df_census_changes_map_top_changes <- df_census_changes_map %>%
  mutate(sign = ifelse(pct_change_1880_1930 > 0, "Pop increase", "Pop decrease")) %>%
  group_by(sign) %>%
  slice_max(abs(pct_change_1880_1930), n = 12) %>%
  ungroup() %>% 
  mutate(name = fct_reorder(name, pct_change_1880_1930))


df_census_changes_map_top_changes %>%
  ggplot(aes(pct_change_1880_1930, name)) +
  geom_col() +
  scale_x_continuous(labels = scales::percent_format(scale = 1)) +
  labs(
    title = "Percentage change in population by parish",
    subtitle = "1880 to 1910",
    x = "% change in pop",
    y = NULL
  )

plot_pop_changes <- function(sg) {
  df_census_changes_map_top_changes %>%
    filter(sign == sg) %>%
    select(name, x1880:x1930) %>%
    pivot_longer(-c(name), names_to = "year", values_to = "pop") %>%
    mutate(year = parse_number(year)) %>%
    ggplot(aes(year, pop, colour = name)) +
    geom_line() +
    gghighlight::gghighlight() +
    # scale_y_log10() +
    scale_y_continuous(labels = scales::number_format()) +
    labs(
      x = NULL,
      y = "Population (log scale)"
    )
}

plot_pop_changes("Pop increase")
plot_pop_changes("Pop decrease")


plot_gg_map(df_census_changes_map_top_changes %>%
  filter(sign == "Pop decrease"), c(1:25), pct_change_1880_1930) +
  scale_fill_gradient2(
    low = "#2c7fb8",
    high = "#f03b20",
    midpoint = 0,
    mid = "#ffffff",
    na.value = "#FFFF00"
  ) +
  labs(subtitle = NULL)

```

Anton's family were from Uppsala - who were priests then they had to move up North to become miners! Missionaries to the Sammi. 




Need to do this for each county. Let's write some functions.

Next question to ask is for the counties that see depopulation from rural areas and population growth in urban areas, where do these people come from? Where are they born and what do they do?

Let's first try to link the 1930 censusn in to this map.


Another question we need to answer: 

Where is the 1930 census complete??

```{r}
# plot_gg_map(df_census_changes_map, c(1:5), x1930)

df_census_changes_map %>%
  st_as_sf() %>%
  st_transform(., crs = 4326) %>%
  ggplot() +
  geom_sf(aes(fill = x1930, geometry = geometry), colour = "black") +
  scale_fill_viridis_c(option = "A", na.value = "#FFFF00") +
  labs(
    title = "Population in Sweden by parish in 1930",
    caption = "Source: 1930 census",
    subtitle = "Yellow filled are missing parishes"
  )
```

## Now we need to caluclate the birth places of people in the 1930 census and aggregate up to lan level.

Start by cutting down this census

```{r}
# df <- read.csv(here::here("data", "Folk1930.csv"), sep = "\t")
# 
# df <- df %>% as_tibble() %>% 
#   janitor::clean_names()
# 
# df %>% head(20) %>% view()
# 
# df <- df %>%
#   mutate(
#     n_char_scbkod = nchar(scbkod),
#     scbkod = as.character(scbkod)
#   ) %>%
#   mutate(scbkod = case_when(
#     n_char_scbkod == 5 ~ str_c("0", scbkod),
#     TRUE ~ scbkod
#   )) %>%
#   select(-n_char_scbkod)
# 
# df %>%
#   select(scbkod, yrke, yrkkod, fodar, fscbkod, kon, civ, inflar, inflfors, inflscb, skola,
#          inkomst, formogh) %>%
#   write_rds("data/folk_1930_short.rds")

# df %>% 
#   select(lannr, forsnr, scbkod) %>% 
#   distinct() %>% 
#   write_rds("parish_and_county_codes.rds")
```

```{r}
df <- read_rds("data/folk_1930_short.rds")
```

Questions I need to answer - how many of the infar vars are complete, vs the birth ones?

So the birth parishes are complete - but the current parishes of the 1930 census are just 

```{r}
df %>% 
  count(scbkod,
        fscbkod) 
  # write_rds("birth_place_counts.rds")

```

Should aggregate up to lan level. let's work on this now

```{r}
parish_and_county_codes <- read_rds("parish_and_county_codes.rds")
```

okay done

Now we want to show where the people came from who moved to the top growing parishes.

```{r}
df_census_changes_map_top_changes %>% 
  arrange(desc(pct_change_1880_1930)) %>% 
  pull(ref_code_char)

```

Let's do it for these three: 248006, 016201 and 148022

```{r}
map_migration_counts <- function(parish) {
  migration_counts <- df %>%
    filter(scbkod == parish) %>%
    inner_join(parish_and_county_codes, by = c("fscbkod" = "scbkod")) %>%
    count(lannr) %>%
    rename(lan_code = lannr)

  st_map <- read_rds("data/st_map.rds")

  st_map <- st_map %>%
    st_transform(., crs = 4326)

  st_map_single <- st_map %>%
    filter(ref_code_char == parish)

  county_map <- read_rds("data/county_map.rds") %>%
    st_transform(., crs = 4326)

  county_map <- county_map %>%
    inner_join(migration_counts)

  # layer up the map - start with a background with ggmap?

  bbcoords <- county_map %>%
    st_bbox() %>%
    as.numeric()

  get_zoom <- function(bbox) {
    lonlength <- bbcoords[3] - bbcoords[1]
    latlength <- bbcoords[4] - bbcoords[2]
    zoomlon <- ceiling(log2(360 * 2 / lonlength))
    zoomlat <- ceiling(log2(180 * 2 / latlength))
    zoom <- max(zoomlon, zoomlat)
    zoom
  }

  zm <- get_zoom(bbcoords)

  message("Zoom is: ", zm)

  ggmap_obj <- get_map(bbcoords, zoom = zm)

  ggmap(ggmap_obj) +
  # ggplot() +
    geom_sf(
      data = county_map,
      aes(fill = n, geometry = geometry),
      colour = "black",
      inherit.aes = FALSE,
      alpha = .5
    ) +
    geom_sf(
      data = st_map_single,
      aes(geometry = geometry),
      fill = "#FFFF00",
      colour = "black",
      inherit.aes = FALSE,
    ) +
    scale_fill_gradient2(
      low = "#2c7fb8",
      high = "#f03b20",
      midpoint = 0,
      mid = "#ffffff",
      na.value = "#FFFF00"
    ) +
    # scale_fill_gradientn(colours = colorspace::diverge_hcl(7),
    # na.value = "#ffffff") +
    labs(
      title = "Souce of residents born out of Parish",
      subtitle = glue::glue("In ", parish),
      # fill = "% pop change",
      # caption = "Yellow areas have missing data",
      x = NULL,
      y = NULL
    )
}

# test
map_migration_counts("148022")
map_migration_counts("016201")
```

That works well - now present it

and create a function that shows where they moved from prior to this, rather than born. 

```{r}
df %>% 
  skimr::skim()
```

For those from within the län, where do they come from? Function to do this - one input - just the parish code.

So give it the parish code, then it filters down to just the län. 

Then it does the ggmap thing, then it plots the map - think about colours.

```{r}
within_lan_migrants <- function(parish) {
  # what is the lan number?
  parish_and_county_codes <- read_rds("parish_and_county_codes.rds")

  lan_highlight <- parish_and_county_codes %>%
    filter(scbkod == parish) %>%
    pull(lannr)

  # now count the places of birth of those born inside the lan
  parish_of_birth_counts <- df %>%
    filter(scbkod == parish) %>%
    inner_join(parish_and_county_codes, by = c("fscbkod" = "scbkod")) %>%
    filter(lannr == lan_highlight) %>%
    count(fscbkod) %>%
    filter(fscbkod != parish)

  # map of parishes
  st_map <- read_rds("data/st_map.rds")

  st_map <- st_map %>%
    st_transform(., crs = 4326)

  st_map_single <- st_map %>%
    filter(ref_code_char == parish)

  st_map_counts <- st_map %>%
    inner_join(parish_of_birth_counts, by = c("ref_code_char" = "fscbkod"))

  # layer up the map - start with a background with ggmap?

  bbcoords <- st_map_counts %>%
    st_bbox() %>%
    as.numeric()

  get_zoom <- function(bbox) {
    lonlength <- bbcoords[3] - bbcoords[1]
    latlength <- bbcoords[4] - bbcoords[2]
    zoomlon <- ceiling(log2(360 * 2 / lonlength))
    zoomlat <- ceiling(log2(180 * 2 / latlength))
    zoom <- max(zoomlon, zoomlat)
    zoom
  }

  zm <- get_zoom(bbcoords)

  message("Zoom is: ", zm)

  ggmap_obj <- get_map(bbcoords, zoom = zm)

  ggmap(ggmap_obj) +
    # ggplot() +
    geom_sf(
      data = st_map_counts,
      aes(fill = n, geometry = geometry),
      colour = "black",
      inherit.aes = FALSE,
      alpha = .5
    ) +
    geom_sf(
      data = st_map_single,
      aes(geometry = geometry),
      fill = "#FFFF00",
      colour = "black",
      inherit.aes = FALSE,
    ) +
    scale_fill_gradient2(
      low = "#2c7fb8",
      high = "#f03b20",
      midpoint = 0,
      mid = "#ffffff",
      na.value = "#FFFF00"
    ) +
    # scale_fill_gradientn(colours = colorspace::diverge_hcl(7),
    # na.value = "#ffffff") +
    labs(
      title = "Souce of residents born out of Parish",
      subtitle = glue::glue("In ", parish),
      # fill = "% pop change",
      # caption = "Yellow areas have missing data",
      x = NULL,
      y = NULL
    )
}

within_lan_migrants("016201")
within_lan_migrants("248006")
within_lan_migrants("148022")
```

Of the parishes that grow the fastest, what are the most common job titles and job codes??

divided by whether or not you were born in the parish. See if there is a skill differential. That's the interesting point.

make a point of the missing job titles and job codes.

```{r}
df %>% 
  filter(scbkod == "016201") %>% 
  count(yrke, sort = T)


```


## Function to get the number of people born inside the parish, lan and outside.

```{r}
get_n_born_where <- function(parish) {
  message("Getting people born in ", parish)
  lan_number <- df %>%
    filter(scbkod == parish) %>%
    mutate(lan_number = str_sub(scbkod, 1, 2)) %>%
    distinct(lan_number) %>% 
    pull(lan_number)

  n_pop_1930 <- df %>%
    filter(scbkod == parish) %>%
    count() %>%
    pull()

  n_born_in_parish <- df %>%
    filter(scbkod == parish) %>%
    filter(scbkod == fscbkod) %>%
    count() %>%
    pull()

  n_born_in_county <- df %>%
    filter(scbkod == parish) %>%
    filter(scbkod != fscbkod) %>%
    mutate(
      birth_lan_code = str_sub(fscbkod, 1, 2),
    ) %>%
    filter(birth_lan_code == lan_number) %>%
    count() %>%
    pull()

  n_born_elsewhere <- n_pop_1930 - n_born_in_parish - n_born_in_county

  origin_stats <- tibble(n_pop_1930, n_born_in_parish, n_born_in_county, n_born_elsewhere)
  
  origin_stats
    # pivot_longer(-n_pop_1930) %>%
    # mutate(
    #   pct = scales::percent(value / sum(value)),
    #   value_str = scales::number(value),
    #   name_str = str_remove_all(name, "^n_"),
    #   name_str = str_replace_all(name_str, "_", " "),
    #   name_str = str_to_title(name_str)
    # )

  # origin_stats %>% mutate(parish = parish)
}

get_n_born_where("051309")
```

Try a leaflet map rather:

to make this more tidy I should summarise the data set with all the things we need

```{r}
test <- df %>%
  distinct(scbkod) %>% 
  # tail(10) %>% 
  mutate(data = map(scbkod , possibly(get_n_born_where, "failed"))) %>% 
  unnest()

# test %>% write_rds("parish_birth_stats.rds")

```


```{r}
df %>% 
  group_by(scbkod) %>% 
  count() %>% 
  ungroup()

df_census_changes


library(leaflet)

leaflet() %>% 
  setView(lng = 12,
          lat = 56,
          zoom = 4) %>% 
  addProviderTiles("CartoDB.Positron")
```

## What are the electricity parishes?

```{r}
parish_map <- read_rds("mpttp_parishes.rds")

# 60.5686° N, 17.4489° E älvkarleby

# 58.2750° N, 12.2727° E Olidan 
# 
# hydro <- tibble(name = c("älvkarleby", "olidan"),
#        x = c(17.4489, 12.2727),
#        y = c(60.5686,58.2750)) %>% 
#   mutate()

hydro <- st_sf(st_sfc(st_point(c(17.4489, 60.5686)),st_point(c(12.2727, 58.2750))), crs = 4326)

hydro_1 <- st_sf(a = 1, st_sfc(st_point(c(17.4489, 60.5686))), crs = 4326)

hydro_2 <- st_sf(a = 2, st_sfc(st_point(c(12.2727, 58.2750))), crs = 4326)

hydro_1 %>% bind_rows(hydro_2)

parish_map %>% 
  st_buffer(dist = 5000) %>% 
  st_join(hydro) %>% 
  ggplot() +
  geom_sf() 




```


## Wealth and gini maps

Starting with mean income and wealth

```{r}
incomes <- df %>% 
  filter(!is.na(inkomst)) %>% 
  group_by(scbkod) %>% 
  summarise(mean_income = mean(inkomst),
            log_mean_income = log(mean(inkomst)))

wealth <- df %>% 
  filter(!is.na(formogh)) %>% 
  group_by(scbkod) %>% 
  summarise(mean_wealth = mean(formogh),
            log_mean_wealth = log(mean(formogh)))



```

Now looking at the ginis

```{r}
library(ineq)

ineq(c(3, 4, 5, 8), type = "Gini")

incomes <- df %>% 
  filter(!is.na(inkomst),
         scbkod  == "018001") %>% 
  select(inkomst) %>% 
  pull()

income
ineq(incomes, type = "Gini")

```

### Function to get gini coefficient

```{r}
get_gini <- function(parish) {
  message("Getting gini from ", parish)
  incomes <- df %>%
    filter(!is.na(formogh),
           scbkod == parish) %>% 
    pull(formogh)
  
  ineq(incomes, type = "Gini")
}

ginis <- df %>% 
  distinct(scbkod) %>% 
  mutate(gini = map(scbkod, possibly(get_gini, otherwise = "failed")))

income_ginis <- ginis %>% 
  unnest(gini)

# income_ginis %>% write_rds("income_ginis.rds")

# wealth ginis

# income_ginis %>% write_rds("wealth_ginis.rds")


income_ginis <- read_rds("income_ginis.rds") %>% 
  rename(income_gini = gini) 
wealth_ginis <- read_rds("wealth_ginis.rds") %>% 
  rename(wealth_gini = gini) 

ginis <- income_ginis %>% 
  inner_join(wealth_ginis)

wealth_and_income <- ginis %>% 
  inner_join(incomes) %>% 
  inner_join(wealth)

wealth_and_income <- wealth_and_income %>% 
  mutate(across(contains("gini"), .fns = ~ .x * 100))

wealth_and_income %>% write_rds("wealth_and_income.rds")


```

## Join to df census changes

```{r}
df_census_changes <- read_rds("df_census_changes.rds")

wealth_and_income <- read_rds("wealth_and_income.rds")

df_census_changes <- df_census_changes %>% 
  left_join(wealth_and_income, by = c("ref_code_char" = "scbkod"))

df_census_changes <- df_census_changes %>%
  pivot_longer(-ref_code_char, names_to = "census_change_series") %>%
  rename(parish = ref_code_char) %>%
  mutate(census_change_series = case_when(
    census_change_series == "x1880" ~ "Population in 1880",
    census_change_series == "x1890" ~ "Population in 1890",
    census_change_series == "x1900" ~ "Population in 1900",
    census_change_series == "x1910" ~ "Population in 1910",
    census_change_series == "x1930" ~ "Population in 1930",
    census_change_series == "mon_inc_1880_1910" ~ "Population change 1880:1910 (binary)",
    census_change_series == "mon_inc_1880_1930" ~ "Population change 1880:1930 (binary)",
    census_change_series == "pct_change_1880_1910" ~ "Population change 1880:1910 (pct)",
    census_change_series == "pct_change_1880_1930" ~ "Population change 1880:1930 (pct)",
    census_change_series == "income_gini" ~ "Income gini in 1930",
    census_change_series == "wealth_gini" ~ "Wealth gini in 1930",
    census_change_series == "mean_income" ~ "Mean income in 1930",
    census_change_series == "log_mean_income" ~ "Mean income in 1930 (logged)",
    census_change_series == "mean_wealth" ~ "Mean wealth in 1930",
    census_change_series == "log_mean_wealth" ~ "Mean wealth in 1930 (logged)",
  ),
        value = case_when(
          str_detect(census_change_series, "Population change") ~ pmin(value, 500),
          TRUE ~ value
        ))

df_census_changes %>% write_rds("df_census_changes_and_fin.rds")
```

### Electricity map slider

Whats the plan? We have to create a map with a slider for the different years. Need to combine into one dataframe and have two filters. One for power generation and one for the year.

```{r}
power_1885 <- read_rds("1885_water_and_heat.rds") %>% mutate(year = 1885,
                                                             content = "Power generation")
power_1900 <- read_rds("1900_water_and_heat.rds") %>% mutate(year = 1900,
                                                             content = "Power generation")

grid_1900 <- read_rds("1900_grid.rds") %>% mutate(year = 1900, content = "Grid")
grid_1911 <- read_rds("1911_grid.rds") %>% mutate(year = 1911, content = "Grid")
grid_1926 <- read_rds("1926_grid.rds") %>% mutate(year = 1926, content = "Grid")

elec_map_grid <- grid_1900 %>% 
  bind_rows(grid_1911) %>% 
  bind_rows(grid_1926)  %>% 
  st_transform(crs = 4326)


elec_map_power <- power_1885 %>% 
  bind_rows(power_1900) %>% 
  st_transform(crs = 4326)
```

Now draw the map

```{r}
elec_map_grid %>%
  ggplot(aes(colour = factor(year))) +
  geom_sf()


elec_map_grid %>%
  filter(year == 1926) %>%
  leaflet() %>%
  setView(
    lng = 12,
    lat = 63,
    zoom = 5
  ) %>%
  addProviderTiles("CartoDB.Positron") %>%
  addPolylines()



elec_map_power_filtered <- elec_map_power %>%
  filter(year == 1900)

pal <- colorFactor("Set1", elec_map_power_filtered$type)

  
labels <- sprintf(
  "<strong>%s</strong><br/>%.0f kW generation capacity",
  elec_map_power_filtered$type, elec_map_power_filtered$power
) %>% lapply(htmltools::HTML)


leaflet(elec_map_power_filtered) %>%
  setView(
    lng = 12,
    lat = 63,
    zoom = 5
  ) %>%
  addProviderTiles("CartoDB.Positron") %>%
  addCircleMarkers(
    weight = 1,
    radius = ~ sqrt(power),
    color = ~ pal(type),
    popup = labels
  ) %>%
  addPolylines(
    data =
      elec_map_grid %>%
        filter(year == 1926)
  ) %>%
  addLegend("bottomright", pal = pal, values = ~type, title = "Power source")

```


Trash

```{r}
get_bb_coords <- function(tbl) {
  # this function gets the bounding box coordinates of a section of the map.
  tbl %>%
    st_as_sf() %>%
    st_bbox() %>%
    as.numeric()
}

get_map_succinct <- function(tbl, ct) {
  bbox <- tbl %>%
    st_as_sf() %>%
    st_transform(., crs = 4326) %>%
    filter(county == ct) %>%
    get_bb_coords()
  
  get_map(bbox, zoom = 9)
  
}

```

